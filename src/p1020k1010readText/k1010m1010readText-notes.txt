[removed code which is not examples]

2018/01/08

removed from :
if __name__ == '__main__':
	[py code]
	LLangAttr = OReadTMX.findLangIDs(OReadTMX.root) # attribute / value pairs in a list for all languages creates a list of xml:lang='EN-UK'
	
	# initialise the FileName generator object
	OGenerateOutputFileNames = clGenerateOutputFileNames()
	# generate list of LangIDs from attribute / value pairs
	LSuffixes = OGenerateOutputFileNames.genLangIDSuffixes(LLangAttr)
	# generate OutputFilenames given the list of lang ids and system argv[1] :: TODO :: to change -- pair : lang ID + file name! to know which language to write where!
	# LFileNameOutNLangID = OGenerateOutputFileNames.genFileNamesOut(SFNameTemplate, LSuffixes, IStageNumber)
	LFileNameOutNLangID = OGenerateOutputFileNames.genFileNamesOut(sys.argv[1], LSuffixes, 1)
	
	# OGenerateOutputFileNames = clGenerateOutputFileNames(sys.argv[1], ['uk-UA', 'en-GB'], 1)
	# OGenerateOutputFileNames = clGenerateOutputFileNames(sys.argv[1], LLangIDs, 1)
	
	
	pass



removed from: class for generating file names:
class clGenerateOutput(object):
	'''
	service file naming class:
	generates output file names, similar to pathlib function for input file names
	'''

	def __init__(self):
		self.LFileNamesOut = []
		# self.genFileNamesOut(SFNameTemplate, LSuffixes, IStageNumber) # modifies self.LFileNamesOut
		return
	
	def getData(self):
		return self.LFileNamesOut

	def genLangIDSuffixes(self, LTuvUniq):
		# key-value pairs (attribute=val) are unique, but langIDs are not guaranteed to be unique; so we generate numeric IDs automatically, since keys cannot be in file names (contain / :, etc.)
		i = 0
		LSuffixes = []
		for key, val in LTuvUniq:
			i +=1; sID = str(10 + i)
			LSuffixes.append(sID + '-' + val)
		return LSuffixes
	

	def genFileNamesOut(self, SFNameTemplate = './clReadTMXInput.txt', LSuffixes=[''], IStageNumber = 0):
		'''
		using SFNameTemplate (normally - input file name) as a template for generating a list of output file names
		'''
		SHead, Tail = os.path.split(SFNameTemplate) # splitting directory name from file+extension name
		SRoot, SExtension = os.path.splitext(Tail) # splitting extension from the Tail (file+extension)
		
		self.LFileNamesOut = [ SRoot + '-' + SSuffix + '-' + str(100 + IStageNumber) + SExtension for SSuffix in LSuffixes ]
		SLFileNamesOut = str(self.LFileNamesOut)
		# SRootOut = SRoot + 's01' + SExtension
		# SFileNameOut = os.path.join(SHead, SRootOut)
		
		# print ("%(SHead)s %(Tail)s %(SRoot)s %(SExtension)s\n" % locals())
		print ("%(SLFileNamesOut)s" % locals())
		return self.LFileNamesOut # to change :: pair with langID -- to know which language where to write...
	





