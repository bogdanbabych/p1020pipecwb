documentation for the project file

2017/12/18

the purpose 
    read files for processing in cwb
    
    working with Ukrainian military texts
    
    tmx files
    and
    alignment -- for tmx
    
    the stages: into tmx; from tmx
    
2017/12/27
the philosophy, scope and the conext of the project.

[philosophy]
    - developing a pipeline for processing corpora  
    - moving to Python and linking relevant libraries, etc.
    
    - creating a GitHub library for processing parallel copora
    		> link to CWB and python frontend
    		> open-source repository
    		> finished products
    		
    		>> separating development workspace from product workspace & release space
    		title of the project
    		PyCorpus
    		PyCorpus-Parallel
    			>> for researchers in translation corpus linguistics
    
2017/01/04
[stages of the development]
    1. data preparation
    - identifying sources of data: parallel texts
    - re-creating pipeline for tmx 2 cwb
    
    - creating a pipeline 
    
    
[tasks]
    1. a pipeline: tmx --> giza format (1 segment per line)
        - reading xml in a proper way
        - portable for tbx format, etc.
        
        
        
    2. tmx2giza ; giza2tmx toolkit --> start of PyParaCorpus project
    3. tmx2tseg ; tseg2tmx toolkit --> input for TreeTagger / other tagsets
    
    4. possible 'health check' on tmx file: whether it contains
    		one segment per tuv
    		one language id per tu in each case --> and show / highlight problems...
    
    
 [steps]
 	giza and tseg formats implementation
 	1. implementing return of language list 
 	2. impl: aligned segments data structure ? <internal ?
 		> to be able to:
 		> generate tseg and giza format in a straightforward way
 	3. testing implementation for ElementTree interface to xml
 	
 		
    
    
    
    
    
[further tasks]
    1. neural MT training from small datasets
        - experiments: linking with data annotation
    
    2. terminological extensions to the interface
        - integrating term annotation ; 
        - moving beyond what has been achieved
        - designing interactive activities for students and participants of the workshops
        - implementing / developing business models...
        
    
    3. deep learning frameworks
    
    4. to plan what I want to do with the experiemntal workspace / representations:
    		- demo resources
    		- integration of terminology
    		? which experiments we need / be able to run: MWEs, etc.
    		// research proposal writing framework...
    		
    
    
    
[]
    
[development details]
    Reading the whole file to the string / converting
    Processing the string as a separate class
    
    a point on philosophy of the development:
    // handling exceptions, such as no file as errors rather than warnings... --> we need to understand that the programme failed rather than discover this
    from wrong output == it may be too late then to see wrong behavious
    
    // output file name is created from input file name using naming conventions for the project, but not given in a shell script
    // the format of shell scripts needs to be kept simple; the code should be reusable without these scripts. 
    
    //defailt values normally in __init__ function >> again, to capture errors on the development stage, not hide them under the carpet
    // use list comprehension and other compact forms rather than cycles etc. where possible to define sets
	> using declarative format where possible which has procedural interpretation...
	
	// separation of string generation and string printing to file
		>> engineering reason :: input processing will contain suffixes of languages in TMX file -- which will be used as output file name suffixes
		>> processing and generation of the string input/output can happen simultaneously with finding out what are the languages in tmx files.
		
 


[documentation]

# list comprehension documentation:
http://www.secnetix.de/olli/Python/list_comprehensions.hawk   
'''
	Python: List Comprehensions
Note: Lines beginning with ">>>" and "..." indicate input to Python (these are the default prompts of the interactive interpreter). Everything else is output from Python.
Python supports a concept called "list comprehensions". It can be used to construct lists in a very natural, easy way, like a mathematician is used to do.

The following are common ways to describe lists (or sets, or tuples, or vectors) in mathematics.

S = {x² : x in {0 ... 9}}
V = (1, 2, 4, 8, ..., 2¹²)
M = {x | x in S and x even}
You probably know things like the above from mathematics lessons at school. In Python, you can write these expression almost exactly like a mathematician would do, without having to remember any special cryptic syntax.

This is how you do the above in Python:

>>> S = [x**2 for x in range(10)]
>>> V = [2**i for i in range(13)]
>>> M = [x for x in S if x % 2 == 0]
>>> 
>>> print S; print V; print M
[0, 1, 4, 9, 16, 25, 36, 49, 64, 81]
[1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096]
[0, 4, 16, 36, 64]
I'm sure you want to see a more complicated example. :-) The following is yet another way to compute prime numbers. The interesting thing is that we first build a list of non-prime numbers, using a single list comprehension, then use another list comprehension to get the "inverse" of the list, which are prime numbers.

>>> noprimes = [j for i in range(2, 8) for j in range(i*2, 50, i)]
>>> primes = [x for x in range(2, 50) if x not in noprimes]
>>> print primes
[2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47]

'''

https://stackoverflow.com/questions/9138112/looping-over-a-list-in-python
Try this,

x in mylist is better and more readable than x in mylist[:] and your len(x) should be equal to 3.

>>> mylist = [[1,2,3],[4,5,6,7],[8,9,10]]
>>> for x in mylist:
...      if len(x)==3:
...        print x
...
[1, 2, 3]
[8, 9, 10]
or if you need more pythonic use list-comprehensions

>>> [x for x in mylist if len(x)==3]
[[1, 2, 3], [8, 9, 10]]
>>>




[experiments]
	[experiments with the root object] >> placeholder in py file, removed from there
	[py code]
		print(root.tag)
		print(root.attrib)
		for child in root:
			print(child.tag, child.attrib)
		
		for tuv in root.iter('tuv'):
			print(tuv.attrib)
			
	[experiments with computing the file name suffixes for all the objects in the file --> not necessary any more; this will be computed in runtime for each segment]
	[if a segment already exists, another identifier will be generated... ]
	[docs: url: https://docs.python.org/3.6/library/xml.etree.elementtree.html#elementtree-xpath ]
	[py code]
	
		'''
		finding language identifiers in the file
		list comprehension: forming a list of key-value pairs with langauge IDs (for naming files / aligned indices)
		how it works : it is computed left to right; (key, val) become element of the list; root.iter('tuv') iterates over tuv tags that have lang id, 
		tuv.attrib.items() converts attribute=value dictionary into a tuple (key, value) in each of the cases where 'tuv' tag is processed
		list comprehensions are best explained in: http://www.secnetix.de/olli/Python/list_comprehensions.hawk & https://stackoverflow.com/questions/9138112/looping-over-a-list-in-python
		'''
		# is this necessary? we need only a suffix for each segment, which can be determined in run-time, not pre-computed in advance ... 
		LTuv = [ (key, val) for tuv in root.iter('tuv') for (key, val) in tuv.attrib.items() ]
		# LTuv = [ tuv.attrib.items() for tuv in root.iter('tuv')]
		
		SetTuv = set(LTuv)
		LTuvUniq = list(SetTuv)
		
		# key-value pairs (attribute=val) are unique, but langIDs are not guaranteed to be unique; so we generate numeric IDs automatically, since keys cannot be in file names (contain / :, etc.)
		i = 0
		LSuffixes = []
		for key, val in LTuvUniq:
			sID = str(10 + i); i +=1
			LSuffixes.append(sID + '-' + val)
		return LSuffixes
		print(str(LTuvUniq))

		return LTuvUniq

	[experiments with findall, ElementTree.tostring function, etc.]
		for xmlTU in root.iter('tu'):
			# print(xmlTU.attrib)
			# print(xmlTU.text)
			for xmlTUV in xmlTU.findall('tuv'):
				# if len(xmlTUV.findall('seg')) > 1: 
				print('\t:segs=', str(len(xmlTUV.findall('seg'))))
				for xmlSeg in xmlTUV.findall('seg'):
					# if len(xmlSegs) > 1:
					print('SEG:', ElementTree.tostring(xmlSeg, encoding='unicode', method='xml'))
				# testing with print 
				
				print('\t', xmlTUV.attrib)
				# str1 = ElementTree.tostring(xmlTUV, encoding='unicode', method='xml')
				# print(str1)
				# for el in xmlTUV.itertext():
				# 	print('\t\tITERTEXT', str(el))
					
				# print(xmlTUV.text, '\n')
				pass

		print('in trees2seg:')
		print(str(root), '\n')
				



